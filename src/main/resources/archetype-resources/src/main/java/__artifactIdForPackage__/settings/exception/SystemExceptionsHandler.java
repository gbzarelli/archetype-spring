package ${customPackage}.settings.exception;

import ${customPackage}.dto.HttpResponseException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Class auto-generated by archetype-spring project
 * Repository: http://californio.keynet.com.br:8089/java/archetype/archetype-spring
 *
 * The @ControllerAdvice annotation was first introduced in Spring 3.2.
 * It allows you to handle exceptions across the whole application, not just to an individual controller.
 * You can think of it as an interceptor of exceptions thrown by methods annotated with @RequestMapping or
 * one of the shortcuts.
 * --
 * https://medium.com/@jovannypcg/understanding-springs-controlleradvice-cd96a364033f
 */
@ControllerAdvice
public class SystemExceptionsHandler {

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(value = MethodArgumentNotValidException.class)
    public ResponseEntity handlerMethodArgumentNotValidException(MethodArgumentNotValidException ex) {
        return ResponseEntity.badRequest().body(createHttpResponse(ex.getBindingResult()));
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(value = BindException.class)
    public ResponseEntity handlerBindException(BindException ex) {
        return ResponseEntity.badRequest().body(createHttpResponse(ex.getBindingResult()));
    }

    private HttpResponseException createHttpResponse(BindingResult bindingResult) {
        HttpResponseException httpResponseException = new HttpResponseException(
                bindingResult.getAllErrors().get(0).getDefaultMessage()
        );
        for (FieldError fieldError : bindingResult.getFieldErrors()) {
            httpResponseException.addFieldError(fieldError.getField());
        }
        return httpResponseException;
    }


}