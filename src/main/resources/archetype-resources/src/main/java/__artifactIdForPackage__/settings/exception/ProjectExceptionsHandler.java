package ${customPackage}.settings.exception;

import ${customPackage}.dto.HttpResponseException;
import ${customPackage}.exception.RegisterException;
import ${customPackage}.exception.ValidateRegisterException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Class auto-generated by archetype-spring project
 * Repository: http://californio.keynet.com.br:8089/java/archetype/archetype-spring
 *
 * The @ControllerAdvice annotation was first introduced in Spring 3.2.
 * It allows you to handle exceptions across the whole application, not just to an individual controller.
 * You can think of it as an interceptor of exceptions thrown by methods annotated with @RequestMapping or
 * one of the shortcuts.
 * --
 * https://medium.com/@jovannypcg/understanding-springs-controlleradvice-cd96a364033f
 */
@ControllerAdvice
public class ProjectExceptionsHandler {

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(value = ValidateRegisterException.class)
    public ResponseEntity handlerValidateException(ValidateRegisterException ex) {
        return ResponseEntity.badRequest().body(createHttpResponse(ex));
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(value = RegisterException.class)
    public ResponseEntity handlerRegisterException(RegisterException ex) {
        return ResponseEntity.badRequest().body(createHttpResponse(ex));
    }

    private HttpResponseException createHttpResponse(Exception exception) {
        HttpResponseException httpResponseException = new HttpResponseException(
                exception.getMessage()
        );
        httpResponseException.addFieldError(exception.getLocalizedMessage());
        httpResponseException.addFieldError(exception.toString());
        return httpResponseException;
    }

}